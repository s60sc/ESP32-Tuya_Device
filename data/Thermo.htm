
<!DOCTYPE html>      
<!-- 
  s60sc 2022 
-->   
<html>     
  <head>
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Floor Thermostat</title>
    <link rel="icon" href='data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y="80" font-size="100">ðŸŒ¡</text></svg>'>
    
    <style>
      :root {
        /* colors used on web pages - see https://www.w3schools.com/colors/colors_names.asp */
        --buttonReady: silver;
        --buttonActive: #A0A0A0; /* mid gray */
        --buttonHover: #D0D0D0; /* light gray */
        --buttonText: white;
        --buttonLabel: black;
        --itemInactive: #E0E0E0; /* very light gray */
        --menuBackground: silver;
        --inputText: navy;
        --pageText: black; 
        --inputBackground: whiteSmoke; 
        --alertMsg:red;  
        --itemBorder: silver; 
        --pageBackground: white;
        
         /* logcolors */
        --warnColor: orange;
        --errColor: red;
        --chkColor: green;
        --dbgColor: blue;
     
        /* element sizes */
        --bodySize:1rem; /* used as basis for element, padding, and font sizes */
        --buttonSize: var(--bodySize);
        --buttonHalf: calc(var(--buttonSize) / 2);
        --buttonQuart: calc(var(--buttonSize) / 4);
        --buttonDbl: calc(var(--buttonSize) * 2);
        --inputSize: calc(var(--bodySize) * 0.9);
        --headingSize: calc(var(--bodySize) * 1.25);
        --subheadingSize: var(--bodySize);
        --footerSize: calc(var(--bodySize) * 0.7);    
      }
      
      body {
        font-family: Helvetica  !important;
        background: var(--pageBackground);
        color: var(--pageText);
        font-size: var(--bodySize);     
      }
      
      .hidden {
        display: none
      }
      
      progress {
        accent-color: var(--buttonActive); 
        width: calc(var(--buttonSize) * 15);
      }
      
      .fixed {
        position: fixed;
        top: 0;
      }
      
      .alertMsg {
        left:10%;
        bottom: var(--buttonDbl);
        position:absolute;
        display:block;
        color:var(--alertMsg);
        z-index:20;
        height: var(--buttonDbl);
      }
    
      .header {
        font-size: var(--headingSize);
        padding-left: var(--buttonHalf);
        font-weight:bold;
      }
      
      .subheader {
        font-style: italic;
        font-size: var(--subheadingSize);
        padding-left: var(--buttonQuart);
      }
      
      .tab {
        display: flex;
        overflow: hidden;
        background: var(--menuBackground);
      }

      .tab button {
        background:  var(--buttonReady);
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: var(--buttonHalf);
        transition: 0.3s;
        font-size: calc(var(--buttonSize) * 1.1);
      }

      .tab button.active {
        box-shadow: 0 0 0 var(--buttonQuart)  var(--buttonActive);
        background: var(--buttonActive);
      }
      
      .tab button.hover {
        background: var(--buttonHover);
      }

      .tab button.disabled {
        cursor: default;
        background: var(--itemInactive)
      }
      
      .tabcontent {
        display: none;
      }

      .grid-cols1 {
        grid-template-columns: calc(var(--buttonSize) * 25);
      }
      
      .grid-cols2a {
        grid-template-columns: calc(var(--buttonSize) * 15) calc(var(--buttonSize) * 9);
      }
      
      .grid-cols2b {
        grid-template-columns: calc(var(--buttonSize) * 12) calc(var(--buttonSize) * 6);
        display: grid;
        font-size: var(--buttonSize);
      }
       
      .grid-cols3a {
        grid-template-columns: calc(var(--buttonSize) * 5) calc(var(--buttonSize) * 10) calc(var(--buttonSize) * 9);
      }
          
      .grid-cols3b {
        grid-template-columns: calc(var(--buttonSize) * 9) calc(var(--buttonSize) * 6) calc(var(--buttonSize) * 9);
      }
      
      .grid-cols3c {
        grid-template-columns: calc(var(--buttonSize) * 15) calc(var(--buttonSize) * 5) calc(var(--buttonSize) * 5);
      }
           
      .grid-cols4 {
        grid-template-columns: calc(var(--buttonSize) * 6) calc(var(--buttonSize) * 6) calc(var(--buttonSize) * 6) calc(var(--buttonSize) * 6);
      }
           
      .grid-cols6 {
        grid-template-columns: calc(var(--buttonSize) * 7) calc(var(--buttonSize) * 7)  calc(var(--buttonSize) * 7) calc(var(--buttonSize) * 7) calc(var(--buttonSize) * 7) calc(var(--buttonSize) * 7);
      }
      
      .grid-cols1, .grid-cols2a, .grid-cols3a, .grid-cols3b, .grid-cols3c, .grid-cols4, .grid-cols6 {
        display: grid;
        background: none;
        text-align: center;
        font-size: calc(var(--buttonSize) *2);
        fill: var(--buttonLabel);
        border: 0px solid var(--itemBorder);
      }
      
      .grid-cols1, .grid-cols2b, .grid-cols3b, .grid-cols3c, .grid-cols4, .grid-cols6, .miniButsText {
        text-align: center;
        dominant-baseline: middle;
        text-anchor: middle;
      }
      
      .grid-cols2a, .grid-cols3a {
        text-align: left;
      }
      
      .cfgTitle {
        grid-column: 1/5;
        text-align: left;
      }
      
      svg {
        width: calc(var(--buttonSize) * 8);
        height: var(--buttonDbl);  
      }
      
      rect {
        fill: var(--buttonReady);
        width: 100%;
        height: 100%; 
        x: 0;
        y: 0;
        ry: 15%;
      }
      
      rect:active {
        fill: var(--buttonActive);
      }
    
      rect:hover {
        fill: var(--buttonHover);
      }          
      
      text {
      /*  font-size: var(--buttonSize); 
        fill: var(--buttonText); 
        transform: translate(50%,50%); */
        pointer-events: none;
      }

      .panel {
        padding: 0 var(--buttonSize);
        display: none;
        background-color: var(--pageBackground);
        overflow: hidden;
      }
      
      input, #applog, #ramlog   {
        font: var(--inputSize) 'Courier New';
        font-weight:bold;
        color: var(--inputText);
        background: var(--inputBackground);
        min-width: calc(var(--buttonSize) * 10); 
      }
      
      input[type="radio"], input[type="checkbox"], progress {
        accent-color: var(--buttonActive);
      }
      
      input[type="text"]{
        font-size: var(--inputSize); 
        width: calc(var(--buttonSize) * 6);
      }
      
      input[type="number"]:not(.configItem), input[type="time"] {
        font-size: var(--buttonDbl);
        border: 1px solid var(--itemBorder);
        margin-bottom: var(--buttonQuart);
        min-width: calc(var(--buttonSize) * 7);
        text-align: center;
      }
      
      input[type=number]::-webkit-inner-spin-button {
        opacity: 1
      }
      
    
      /* checkbox toggle switch slider */
            
      .switch {
        position: relative;
        display: inline-block;
        width: calc(var(--buttonSize) * 2);
        height: var(--buttonSize);
        top: var(--buttonHalf);
      }

      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }

      .slider {
        position: absolute;
        border-radius: var(--buttonSize);
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--itemInactive);
        width: calc(var(--buttonSize) * 3);                         
        transition: .4s;
      }

      .slider:before {
        position: absolute;
        border-radius: 50%;
        content: "";
        height: var(--buttonSize);
        width: var(--buttonSize);
        left: var(--buttonQuart);
        background: var(--inputBackground);
        transition: .4s;
      }

      input:checked + .slider {
        background-color: var(--buttonActive);
      }

      input:checked + .slider:before {
        transform: translateX(calc(var(--buttonSize)*1.5));
      }

      #applog, #ramlog  {
        height:50vh;
        width:90%;
        border:2px solid var(--itemBorder);
        overflow:auto;
        background: var(--inputBackground); 
      }
      
      select {
        border: 1px solid var(--menuBackground);
        font-size: var(--inputSize);
        outline: 0;
        border-radius: var(--buttonQuart);
        margin-top: 2px;
      }
      
      .selectField {
         height: calc(var(--inputSize) * 1.5);
      }

      table {
        border-collapse:collapse; 
        table-layout:fixed;
        background: var(--menuBackground);
        text-align: left;
      }
      
      th, td {
        font-weight:bold;
      }
      
      .config-group th, .config-group td {
        border: 0;
        padding: var(--buttonHalf) var(--buttonHalf) 0 var(--buttonHalf); 
        padding-left: var(--buttonSize);
        line-height: var(--buttonDbl);
        font-size: var(--buttonSize);
      }
      
      input.configItem[type="radio"] {
        min-width: var(--buttonSize); 
      }
      
      input.configItem[type="number"] {
        min-width: calc(var(--buttonSize) * 2); 
        width: calc(var(--buttonSize) * 3); 
      }

      .svgCols3b {
        width: calc(var(--buttonSize) * 10); 
        height: calc(var(--buttonSize) * 6); 
      }
      
      .lowerCols3b {
        font-size: calc(var(--buttonSize) * 2.5); 
        transform: translate(50%,70%); 
      }
      
      .upperCols3b {
        fill: var(--buttonText);
        transform: translate(50%,30%); 
      }
      
      .svgCols3c {
        width: calc(var(--buttonSize) * 2.5);  
        height: var(--buttonDbl);
        fill: var(--buttonText);
      }
      
      .svgCols4 {
        width: calc(var(--buttonSize) * 5);  
        height: calc(var(--buttonSize) * 5);  
      }

      .upperCols4 {
        font-size: calc(var(--buttonSize) * 1.5);
        fill: var(--buttonText);
        transform: translate(50%,30%);  
      }
      
      .svgCols1 {
        width: calc(var(--buttonSize) * 24);  
        height: calc(var(--buttonSize) * 3);
      }
      
     .svgCols6 {
        width: calc(var(--buttonSize) * 6);  
        height: calc(var(--buttonSize) * 6); 
        font-size: calc(var(--buttonSize) * 1.5);
      }
      
      .upperText {
        transform: translate(50%,30%);  
      }
      
      .lowerText {
        transform: translate(50%,70%);  
      }
      
      .midText {
        transform: translate(50%,50%); 
      }
      
      .miniButs {
        width: calc(var(--buttonSize) * 5);  
        height: var(--buttonDbl);
        font-size: font-size: var(-buttonSize) * 1.5);        
        fill: var(--buttonText);
      }
      
      .miniButsText {
        font-size: calc(var(--buttonSize) * 1.5);
        transform: translate(50%,60%);
      }
      
      #arrowAnim {
        width: 50%;
        height: 50%;
      }

      .arrow {
        width: var(--buttonSize);
        height: var(--buttonSize);
        border: var(--buttonQuart) solid;
        border-color: red transparent transparent red;
        transform: rotate(135deg);
      }

      .arrowSliding {
        position: absolute;
        -webkit-animation: slide 1s linear infinite; 
      }
      
      @-webkit-keyframes slide {
        0% { opacity:0; transform: translateX(0); }
        25% { opacity:1; transform: translateX(var(--buttonSize)); }
        50% { opacity:0.75; transform: translateX(calc(var(--buttonSize) * 2)); }
        75% { opacity:0.5; transform: translateX(calc(var(--buttonSize) * 3)); }
        100% { opacity:0.25; transform: translateX(calc(var(--buttonSize) * 4)); }
      }

      
    </style>
  </head>
  
  <body>
    <div class="tab fixed">
      <button class="tablinks active" name="Thermo">Thermo</button>
      <button class="tablinks" name="ShowLog">Show Log</button>
      <button class="tablinks" name="EditConfig">Edit Config</button>
      <button class="tablinks" name="OTAUpload">OTA Upload</button>
    </div>
    <br><br><br>
    <div id="Thermo" class="tabcontent" style="display:block">
      <div>
        <svg style="width: calc(var(--buttonSize) * 25); height: calc(var(--buttonSize) * 4)">
          <rect style="fill:saddleBrown; rx:0%"/>
          <text x="5%" y="70%" style="font-size: calc(var(--buttonSize) * 3); fill:tan">Floor Thermostat</text>
        </svg>
      </div>
      <br>
      <div class="grid-cols3b">
        <div>
          <svg class="svgCols3b">
            <rect/>
            <text id="currTemp" class="lowerCols3b"></text>
            <text id="whichTemp" class="upperCols3b">Current</text>
          </svg>
        </div>
        <div id="arrowAnim" style="display:none">
          <br>
          <div class="arrowSliding">
            <div class="arrow"></div>
          </div>
        </div>
        <div id="blankCell">
          <div>&nbsp;</div>
        </div>
        <div>
          <svg class="svgCols3b">
            <rect/>
            <text id="tgtTemp" class="lowerCols3b"></text>
            <text class="upperCols3b">Target</text>
          </svg>
        </div>
      </div>
      <div class="grid-cols3c">
        <div>&nbsp;</div>
        <div>
          <svg class="svgCols3c">
            <rect style="fill:skyblue"/>
            <text id="decTemp" x="50%" y="50%">-</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols3c">
            <rect style="fill:tomato"/>
            <text id="incTemp" x="50%" y="60%">+</text>
          </svg>
        </div>
      </div>
      <br><br>
      <div class="grid-cols4">
        <div>
          <svg class="svgCols4">
            <rect/>
            <text id="progMode" class="lowerText"></text>
            <text class="upperCols4">Mode</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols4">
            <rect/>
            <text id="frost" class="lowerText"></text>
            <text class="upperCols4">Frost</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols4">
            <rect/>
            <text id="switchDisp" class="lowerText"></text>
            <text class="upperCols4">Switch</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols4">
            <rect/>
            <text id="childLock" class="lowerText"></text>
            <text class="upperCols4">Lock</text> 
          </svg>
        </div>
      </div>
      <br><br>
      <div class="grid-cols1">
        <svg class="svgCols1">
          <rect/>
          <text id="doSchedule" class="midText">Schedule</text>
        </svg>
      </div>
      <br>
      <div class="panel" id="schedule">
        <div class="grid-cols3a">
          <div>Slot</div>
          <div>Time</div>
          <div>Temp</div>
          <div>W1:</div>
          <div><input type="time" id="slotTime1" class="update-action"></div>
          <div><input type="number" id="slotTemp1" min="5" max="27" class="inNum update-action"></div>
          <div>W2:</div>
          <div><input type="time" id="slotTime2" class="update-action"></div>
          <div><input type="number" id="slotTemp2" min="5" max="27" class="inNum update-action"></div>
          <div>W3:</div>
          <div><input type="time" id="slotTime3" class="update-action"></div>
          <div><input type="number" id="slotTemp3" min="5" max="27" class="inNum update-action"></div>
          <div>W4:</div>
          <div><input type="time" id="slotTime4" class="update-action"></div>
          <div><input type="number" id="slotTemp4" min="5" max="27" class="inNum update-action"></div>
          <div>W5:</div>
          <div><input type="time" id="slotTime5" class="update-action"></div>
          <div><input type="number" id="slotTemp5" min="5" max="27" class="inNum update-action"></div>
          <div>W6:</div>
          <div><input type="time" id="slotTime6" class="update-action"></div>
          <div><input type="number" id="slotTemp6" min="5" max="27" class="inNum update-action"></div>
          <div>R1:</div>
          <div><input type="time" id="slotTime7" class="update-action"></div>
          <div><input type="number" id="slotTemp7" min="5" max="27" class="inNum update-action"></div>
          <div>R2:</div>
          <div><input type="time" id="slotTime8" class="update-action"></div>
          <div><input type="number" id="slotTemp8" min="5" max="27" class="inNum update-action"></div>
        </div>
        <br>
        <div class="grid-cols1">
          <svg class="svgCols1" style="width: calc(var(--buttonSize) * 19); fill: var(--buttonText)"}">
            <rect/>
            <text id="apply" class="midText">Apply</text>
          </svg>
        </div>
      </div>
     <br><br>
      <div class="grid-cols1">
        <svg class="svgCols1">
          <rect/>
          <text id="doSettings" class="midText">Settings</text>
        </svg>
      </div>
      <br>
      <div class="panel" id='settings'>
        <div class="grid-cols2a">
          <div>Max Floor â„ƒ:</div>
          <div><input type="number" id="floorMax" min="5" max="27" class='tempAttrs'></div>
          <div>Max Room â„ƒ:</div>
          <div><input type="number" id="roomMax" min="5" max="25" class='tempAttrs'></div>
          <div>Calibration â„ƒ:</div>
          <div><input type="number" id="tempCal" min="-5" max="5" value="0" step=".1" class='tempAttrs'></div>
          <div>Backlash â„ƒ:</div>
          <div><input type="number" id="tempLash" min="-5" max="5" value="0" step=".1" class='tempAttrs'></div>
          <div>Alpha:</div>
          <div><input type="number" id="alpha" min="0" max="1" value="1" step=".1" class='tempAttrs'></div>
          <div>Drift:</div>
          <div><input type="number" id="drift" min="0" max="5" value="3" step="1" class='tempAttrs'></div>
          <div>Day Setting:</div>
          <div>
            <svg class="miniButs">
              <rect/>
              <text id="daySetting" class="miniButsText"></text>
            </svg>
          </div>
          <div>Back Light:</div>
          <div>
            <svg class="miniButs">
              <rect/>
              <text id="backLight" class="miniButsText"></text>
            </svg>
          </div>
          <div>Temp Sensor:</div>
          <div>
              <svg class="miniButs">
                <rect/>
                <text id="tempSensor" class="miniButsText"></text>
              </svg>
          </div>
          <div>Reset:</div>
          <div>
            <svg class="miniButs">
              <rect/>
              <text id="doReset" class="miniButsText">!</text>
            </svg>
          </div>
          <!--
          <div>Output Reverse:</div>
          <div>
            <svg class="miniButs">
              <rect/>
              <text id="opReverse" class="miniButsText">Off</text>
            </svg>
          </div>
          <div>Sound:</div>
          <div>
            <svg class="miniButs">
              <rect/>
              <text id="soundOn" class="miniButsText">Off</text>
            </svg>
          </div>
          -->
          <div>Controller:</div>
          <div>
            <svg class="miniButs">
              <rect/>
              <text id="setCtrl" class="miniButsText"></text>
            </svg>
          </div>
        </div>
      </div>
      <br>
      <div class="grid-cols1">
        <div>
          <svg class="svgCols31">
            <rect/>
            <text id="save" class="midText">Save</text>
          </svg>
        </div>
       </div>
    </div>

    <div id="ShowLog" class="tabcontent">
      <div class="header">Monitor & Enter Tuya Commands</div>
      <br>
      <div class="grid-cols2b">
        <div> 
          <svg>
            <rect/>
            <text id="clearWSlog" class="midText">Clear Log</text>
          </svg>
        </div>
      </div>      
      <br>
      <div class="grid-cols1">
        <input type='text' style="width:90%;" placeholder="Enter command for device and press return" id='txtCmd'/> 
      </div>
      <br>
      <div id="applog"></div>
      <br><br>
      <div class="grid-cols2b">
        <div>
          <svg>
            <rect/>
            <text class="midText" id="refreshRAMlog">Display RAM Log</text>
          </svg>
          </div>
        <div>
          <svg>
            <rect/>
            <text class="midText" id="clearRAMlog">Clear RAM Log</text>
          </svg>
        </div>
      </div>
      <br>
      <div id="ramlog"></div>
    </div>
    <br>

    <div id="EditConfig" class="tabcontent">
      <br>
      <div class="header">Control</div>
      <br>
      <div class="subheader">Press a button to view or modify settings (changed values are not validated)</div>
      <div class="subheader">Press Save button to make changes permanent</div>
      <br>
      <div class="grid-cols6">
        <div>
          <svg class="svgCols6">
            <rect/>
            <text id="reset" class="upperText">Reboot</text>
            <text class="lowerText">ESP</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols6">
            <rect/>
            <text id="deldata" class="upperText">Reload</text>
            <text class="lowerText">/data</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols6">
            <rect/>
            <text id="clear" class="upperText">Clear</text>
            <text class="lowerText">NVS</text>
          </svg>
        </div>
        <div>&nbsp;</div>
        <div>&nbsp;</div>
        <div>&nbsp;</div>
        <div>
          <svg class="svgCols6">
            <rect/>
            <text id="wifi" class="upperText">Wifi</text>
            <text class="lowerText">Config</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols6">
            <rect/>
            <text id="stats" class="midText">Stats</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols6">
            <rect/>
            <text id="save" class="midText">Save</text>
          </svg>
        </div>
      </div>
      <div>
        <p class='config-group' id='Cfg'></p>
      </div>
    </div>
           
    <div id="OTAUpload" class="tabcontent">
      <br><br>
      <form id="upload_form" enctype="multipart/form-data" method="post">
        <input class="local" type="file" name="otafile" id="otafile">
        <br><br>
        <progress id="progressOta" value="0" max="100" ></progress>%
        <div class="subheader" id="status"></div>
        <p id="loaded_n_total"></p>
      </form>
    </div>
        
    <div class="alertMsg">
      <span id="alertText"></span>
    </div>
    
    <script>
      'use strict'
      
      // web server ports, automatically derive from entered port number
      const webPort = !window.location.port ? "80" : window.location.port;
      const otaPort = String(+webPort + 1);
      
      let refreshInterval = 5000;
      let isOn = true;
      let minTemp;
      let maxTemp;
      let smoothTemp;
      let rawTemp;
      let showSmooth = true;
      const onoff = ['Off', 'On'];
      const prog = ['Home', 'Auto'];
      const days = ['7', '6+1', '5+2']; 
      const light = ['Off', 'Low', 'Mid', 'High'];
      const sensor = ["Room", "Floor", "Both"];
      const ctrlName = ["MCU", "ESP"];
      const degC = "\u2103";

      function processStatus(dest, key, value, fromUser = true) {
        // process change to status value
        if (dest == ID) {
          // operation based on ID
          if (key == "wifi") getConfig("0");
          else if (key == "hostName") {
            document.title = value;
            if (fromUser) sendControl(key, value);
          }
          else if (key == "otafile") otaUploadFile();
          else if (key == "alertMsg") showAlert(value);
          else if (key == "clearWSlog") $('#applog').innerHTML = "";
          else if (key == "clearRAMlog") clearRAMlog();
          else if (key == "refreshRAMlog") getRAMlog();
          else if (key == "refreshVal") refreshInterval = value * 1000; 
          else if (key == "clockUTC") checkTime(value);
          else if (key == "stats") getConfig("012");
          else if (key == "incTemp") changeTgtTemp(1);
          else if (key == "decTemp") changeTgtTemp(-1);
          else if (key == "doSettings") accordian('settings');
          else if (key == "doSchedule") accordian('schedule');
          else if (key == "switchDisp") changeSwitch(fromUser);
          else if (key == "currTemp") setCurrTemp(fromUser);
          else if (key == "rawTemp") setCurrTemp(fromUser);
          else if (key == "outputOn") changeOutput(value);
          else if (key == "tgtTemp") changeTgtTemp(0);
          else if (key == "frost") changeSetting(key, onoff, fromUser);
          else if (key == "progMode") changeSetting(key, prog, fromUser);
          else if (key == "daySetting") changeSetting(key, days, fromUser);
          else if (key == "backLight") changeSetting(key, light, fromUser);
          else if (key == "tempSensor") changeSensor(fromUser);
          else if (key == "floorMax") setTempRanges();
          else if (key == "roomMax") setTempRanges();
          else if (key == "childLock") changeSetting(key, onoff, fromUser);
          else if (key == "apply") sendUpdates('none');
          else if (key == "doReset") doMCUreset(fromUser);
          else if (key.includes("slot")) statusData[key] = value;
          //else if (key == "soundOn") changeSetting(key, onoff);
          //else if (key == "opReverse") changeSetting(key, onoff);
          else if (key == "setCtrl") changeSetting(key, ctrlName, fromUser);
          else if (fromUser && $('#'+key).classList.contains('tempAttrs')) debounceSendControl(key, value);
          // remaining changes are passed thru to app
          else if (fromUser) sendControl(key, value); 
        }
        else if (dest == CLASS) {}
      }
      
      /************** thermo functions ****************/           
                          
      function changeSwitch(fromUser) {
        changeSetting("switchDisp", onoff, fromUser);
        isOn = (statusData["switchDisp"] == 1) ? true : false;
        changeTgtTemp(0);
      }
      
      function changeSensor(fromUser) {
        changeSetting("tempSensor", sensor, fromUser);
        setTempRanges();
      }
      
      function setTempRanges() {
        // dynamically set temperature ranges
        minTemp = 5; // fixed
        maxTemp = (statusData['tempSensor'] == 1) ? statusData['floorMax'] : statusData['roomMax'];
        $$('.inNum').forEach(el => {
          el.min = minTemp;
          el.max = maxTemp;
          if (+el.value > maxTemp) el.value = maxTemp;
          if (+el.value < minTemp) el.value = minTemp;
        });
        if (statusData["tgtTemp"] > maxTemp) {
          statusData["tgtTemp"] = maxTemp;
          $('text#tgtTemp').textContent = maxTemp + degC;
        }
      }
      
      function setCurrTemp(fromUser) {
        if (statusData['fault'] == 1) $('text#currTemp').textContent = "ERR"; 
        else {
          if (fromUser) {
            // toggle temperature displayed 
            showSmooth = !showSmooth;
            $('text#whichTemp').textContent = showSmooth ? 'Current' : 'Raw';
          }
          smoothTemp = statusData['currTemp']+degC; // latest smoothed temperature
          rawTemp = isDefined(statusData['rawTemp']) ? statusData['rawTemp']+degC : "n/a"; // latest unsmoothed temperature
          // check which value to show
          $('text#currTemp').textContent = showSmooth ? smoothTemp : rawTemp;
        }
      }

      function changeTgtTemp(incVal) {
        if (isOn) {
          let newTemp = +statusData["tgtTemp"] + incVal;
          if ((incVal > 0 && newTemp <= maxTemp) || (incVal < 0 && newTemp >= minTemp)) {
            statusData["tgtTemp"] = newTemp;
            if (+incVal != 0) debounceSendControl('tgtTemp', newTemp);
          } 
          $('text#tgtTemp').textContent = newTemp + degC;
        } else {
          $('text#tgtTemp').textContent = "OFF";
          changeOutput(0);
        }
      }
      
      function changeOutput(isHeating) {
        $("#arrowAnim").style.display = (isHeating == 1) ? "block" : "none";
        $("#blankCell").style.display = (isHeating == 1) ? "none" : "block";
      }
      
      async function changeSetting(key, settings, fromUser) {
        let newval = statusData[key];
        if (fromUser) newval++;
        if (newval == settings.length) newval = 0;
        $('text#'+key).textContent = settings[newval];
        statusData[key] = newval;
        if (fromUser) debounceSendControl(key, newval);
      }
      
      function doMCUreset(fromUser) {
        $('text#doReset').textContent = "!";
        if (fromUser && window.confirm("Are you sure?")) sendControl('doReset', '1');
      }

      function configStatus(refresh) {
        if (!refresh) loadStatus("");
      }

      function customSync() {
        sendCmd("I"); // sync web page with MCU
      }

      /***********************************************/
      
      // common script config
      const doCustomInit = false;
      const doInitWebSocket = true;
      const doLoadStatus = false;
      const doRefreshTimer = false;
      const doCustomSync = true;
      const doHeartbeat = true;
 
      const scriptFiles = ['/web?common.js', 'C:/MyStuff/Arduino/CommonMaster/Latest/common.js']; 
      for (let i = 0; i < scriptFiles.length; i++) {
        const scriptElement = document.createElement('script');
        scriptElement.src = scriptFiles[i];
        document.body.appendChild(scriptElement);
      }

      window.addEventListener('load', function() {
        initialise();
      });
      
    </script>
  </body>
</html>
